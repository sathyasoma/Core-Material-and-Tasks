1.What are collections in Java, and why are they important?
Answer: Collections in Java are frameworks that provide classes and 
interfaces for storing, managing, and manipulating groups of objects.
They are essential because they simplify the process of working with 
data structures and offer various data storage and manipulation options.

2.Explain the difference between the Collection and Collections frameworks in Java.
Answer:
Collection is an interface that represents a group of objects and provides
basic operations like adding, removing, and querying elements.
Collections is a utility class that provides various static methods 
for performing operations on collections, such as sorting, searching,
and synchronization.

3.What is the difference between a Set and a List in Java collections?
Answer:
A Set is a collection that does not allow duplicate elements and does not
maintain the order of elements.A List is a collection that allows 
duplicate elements and maintains the order of elements as they are inserted.

4.Explain the purpose of the Map interface in Java collections.
Answer: The Map interface is used to store key-value pairs. 
It allows you to associate unique keys with corresponding values and 
perform operations like insertion, retrieval, and removal based on the keys.

5.What is the difference between ArrayList and LinkedList in Java?
Answer:
ArrayList is implemented as a dynamically resizing array, making it efficient
for random access but less efficient for insertions and deletions in 
the middle.LinkedList is implemented as a doubly linked list, 
making it efficient for insertions and deletions but less efficient 
for random access.

6.What is the purpose of the HashSet class in Java, and how does it handle duplicate elements?
Answer: HashSet is an implementation of the Set interface that 
stores elements in a hash table. It does not allow duplicate elements and 
uses the hash code of objects to determine uniqueness. 
Duplicate elements are automatically rejected.

7.Explain the difference between the HashMap and Hashtable classes in Java.
Answer:
HashMap is not synchronized, which means it is not thread-safe. 
It allows null values and keys, but it is more efficient in most cases.
Hashtable is synchronized, making it thread-safe but potentially slower 
due to synchronization overhead. It does not allow null values or keys.

8.What is the purpose of the Collections.synchronizedList() method in Java, and how is it used?
Answer: The Collections.synchronizedList() method is used to create a 
synchronized (thread-safe) wrapper around an existing list. 
It allows multiple threads to access and modify the list safely by
synchronizing access to the underlying list.

9.Explain the purpose of the Comparable and Comparator interfaces in Java collections.
Answer:
Comparable is an interface that allows objects of a class to define 
their natural ordering. Objects that implement Comparable can be compared 
and sorted using methods like Collections.sort() or Arrays.sort().
Comparator is a separate interface that allows you to define custom 
comparison logic for objects that you cannot modify directly or for 
sorting in different ways.

10.What is the ConcurrentHashMap class in Java, and why is it useful in multithreaded applications?
Answer: ConcurrentHashMap is a high-performance implementation of the 
Map interface designed for concurrent access by multiple threads. 
It provides better concurrency than traditional synchronized maps, 
allowing multiple threads to read and write without locking the entire map.

11.What is the difference between a TreeSet and a HashSet in Java?
Answer:
HashSet is implemented as a hash table and does not maintain 
any specific order of elements.
TreeSet is implemented as a self-balancing binary search tree 
(usually a Red-Black Tree) and stores elements in sorted order.

12.Explain the purpose of the EnumSet class in Java.
Answer: EnumSet is a specialized implementation of the Set interface
 that is designed to work exclusively with enum elements. 
 It is highly efficient and memory-efficient for sets of enum values.

13.What is the LinkedHashSet class in Java, and how does it differ from a regular HashSet?
Answer: LinkedHashSet is an implementation of the Set interface 
that maintains the order of elements as they are inserted. 
It combines the features of a HashSet and a LinkedList, providing 
fast access and predictable iteration order.

14.Explain the concept of a concurrent collection in Java.
Answer: Concurrent collections are special types of collections 
designed for safe concurrent access by multiple threads. 
They provide methods and mechanisms to ensure thread safety without 
requiring external synchronization.

15.What is the purpose of the java.util.Collections class in Java?
Answer: The java.util.Collections class is a utility class that
provides various static methods for working with collections. 
It includes methods for sorting, searching, shuffling, reversing, 
and synchronizing collections.

16.What is the difference between the Vector and ArrayList classes in Java?
Answer:
ArrayList is not synchronized, which means it is not thread-safe but 
generally more efficient. It can grow dynamically as needed.
Vector is synchronized, making it thread-safe but potentially 
slower due to synchronization overhead. It can also grow dynamically.

17.Explain the purpose of the CopyOnWriteArrayList class in Java.
Answer: CopyOnWriteArrayList is a thread-safe implementation of the List 
interface. It allows multiple threads to read from the list simultaneously,
while write operations (such as adding or modifying elements) 
create a new copy of the list, ensuring that no concurrent modification 
exceptions occur during reads.

18.What is a self-balancing tree, and how does it relate to Java collections?
Answer: A self-balancing tree, such as a Red-Black Tree or AVL Tree, 
automatically reorganizes its elements to maintain a balanced structure. 
In Java, TreeSet and TreeMap are implemented using self-balancing trees 
to provide efficient sorted storage and retrieval of elements.

19.Explain the difference between a HashSet and a LinkedHashSet.
Answer:
HashSet is implemented as a hash table and does not maintain the order
of elements.LinkedHashSet is implemented as a hash table with a 
linked list running through it. It maintains the insertion order of elements.

20.What is the purpose of the Deque interface in Java, and how does it differ from a Queue?
Answer: The Deque interface represents a double-ended queue 
that allows elements to be added or removed from both ends.
It extends the Queue interface and provides additional methods for 
efficient stack and queue operations. A Queue is a simpler interface 
for working with a single-ended queue.