
Props Validation:
-----------------
*props are in important mechanism of passing  the read-only attributes to React-Component.
*props are used in components,if its not used properly its not bahave as we expected.

*thats the reason to avoiod those bugs in the future we can do with "Props Validation"


*React Component special types"PropsTypes".
  *these types catch the bugs and validateing the props.



Syntax:  PropTypes:
==================


class App extends React.Component 
{  

          render() {}  
		  
}  
Component.propTypes = { /*Definition */};  



List of props validators:
--------------------------


1.  PropTypes.any	                                   The props can be of any data type.

2.	PropTypes.array	                                   The props should be an array.

3.	PropTypes.bool	                                   The props should be a boolean.

4.	PropTypes.func	                                   The props should be a function.

5.	PropTypes.number	                               The props should be a number.

6.	PropTypes.object	                               The props should be an object.

7.	PropTypes.string	                               The props should be a string.

8.	PropTypes.symbol	                               The props should be a symbol.

9.	PropTypes.instanceOf	                           The props should be an instance of a particular JavaScript class.

10.	PropTypes.isRequired	                           The props must be provided.

11.	PropTypes.element	                               The props must be an element.

12.	PropTypes.node	                                   The props can render anything: numbers, strings, elements or an array (or fragment) containing these types.

13.	PropTypes.oneOf()	                               The props should be one of several types of specific values.

14.	PropTypes.oneOfType
([PropTypes.string,PropTypes.number])	               The props should be an object that could be one of many types.




example:
---------

import React, { Component } from 'react';
import PropTypes from 'prop-types';


     //install propTypes : npm install prop-types
class PropValid extends Component {

render(){
    PropValid.propTypes = {  
        propArray: PropTypes.array.isRequired,  
        propBool: PropTypes.bool.isRequired,  
        propFunc: PropTypes.func,  
        propNumber: PropTypes.number,  
        propString: PropTypes.string,   
    }  
    PropValid.defaultProps = {  
        propArray: [12,20,31,42,55],  
        propBool: true,  
        propFunc: function(x){return x+5},  
        propNumber: 7416,  
        propString: "sathya",  
    }  
    return(

         <div>
         <h1>Validating Props in React js</h1>

         <center>
         <table>
            <tr>
                <th>Type  </th>
                <th>Value</th>
                <th>Valid</th>
            </tr>

         <tr>
         <td>Array</td>
         <td>{this.props.propArray}</td>
         <td>{this.props.propArray ? "true":"false"}</td>
         </tr>

         <tr>
             <td>Boolean</td>
             <td>{this.props.propBool ? "true":"false"}</td>
             <td>{this.props.propBool ? "true":"false"}</td>
         </tr>

         <tr>  
         <td>Function</td>  
         <td>{this.props.propFunc(20)}</td>  
         <td>{this.props.propFunc(20) ? "true" : "False"}</td>  
     </tr>  

     <tr>  
     <td>String</td>  
     <td>{this.props.propString}</td>  
     <td>{this.props.propString ? "true" : "False"}</td>  
 </tr>

 <tr>  
 <td>Number</td>  
 <td>{this.props.propNumber}</td>  
 <td>{this.props.propNumber ? "true" : "False"}</td>  
</tr>  
         </table>
         </center>
         </div>

    )
}



}

export default PropValid;